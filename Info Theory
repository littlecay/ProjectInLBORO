clear;

N = 200;
noise_variance = 1;
G = [[1 1 1]',[1 0 1]'];
[FLUSHBits n] = size(G);

s = (rand(N,1)>0.5);
s = [s;zeros(FLUSHBits,1)];
% s = [1;1;0;1;0;0;1;1;0;0];
s = [1;1;0;0;0];

coder_output = convolutional_encoder(s,G,n);

x1 = (2*coder_output-1)+sqrt(noise_variance)*randn(length(coder_output),1);
x2 = x1>0

decoded_signal = convolutional_decoder(x2,G,n);

sum(coder_output~=(x2'>0)')
sum(decoded_signal~=s)

function [coder_output] = convolutional_encoder(s,G,n)
 % s input data steam [s(n) s(n+1) ...]';
 % G Generating polyomial
 % Code Rate is 1/n
  G = flipud(G);
  N = length(s);
  [L n1] = size(G);
  if (n1~=n)
    error('The matrix G is not of right dimension');
  end

  shift_register = zeros(L,1);

  for k = 1:N
    shift_register(L) = s(k);
    for k1 = 1:n
      x(k1,k) = mod(sum(shift_register.*G(:,k1)),2);
        end
    shift_register(1:L-1) = shift_register(2:L);
  end

  coder_output = x(:)

end

function [decoded_signal] = convolutional_decoder(x2,G,n)

    N = length(x2);
    Error = zeros(4,N/2+1);
    way = zeros(4,N/2+1);
    Out1 = zeros(4,N/2+1,2);
    Out2 = zeros(4,N/2+1,2);
    node1 = zeros(4,N/2+1);
    node2 = zeros(4,N/2+1);
    Next = zeros(4,N/2+1,2);
    way(1,1) = 1;
    x = '';
    a = zeros(1,N/2);
    k1 = zeros(4,N/2+1);
for i = 1:N+1
    node1(1,i) = 0;
    node1(2,i) = 0;
    node1(3,i) = 1;
    node1(4,i) = 1;
    node2(1,i) = 0;
    node2(2,i) = 1;
    node2(3,i) = 0;
    node2(4,i) = 1;
    Next(1:2,i,1) = 1;
    Next(1:2,i,2) = 3;
    Next(3:4,i,1) = 2;
    Next(3:4,i,2) = 4;
end

for i = 1:N/2+1
    for j = 1:4
        for k = 1:2
            Out1(j,i,k) = mod(([node1(Next(j,i,k),i+1),node1(j,i),node2(j,i)]*G(:,1)),2);
            Out2(j,i,k) = mod(([node1(Next(j,i,k),i+1),node1(j,i),node2(j,i)]*G(:,2)),2);     
    end
  end
end

Error(:) = 9999;
Error(1,1) = 0;

for i = 1:N/2
    for j = 1:4
      for k = 1:2
          comp1 = Out1(j,i,k);
          comp2 = Out2(j,i,k);
          if Error(j,i)+(x2(2*i-1)-comp1)^2+(x2(2*i)-comp2)^2 < Error(Next(j,i,k),i+1) 
            Error(Next(j,i,k),i+1) = Error(j,i)+(x2(2*i-1)-comp1)^2+(x2(2*i)-comp2)^2;
            way(Next(j,i,k),i+1) = j;
            if k == 1
               c = Error(Next(j,i,k),i+1);
               k1(j,i) = k;
            else if Error(Next(j,i,k),i+1) < c
               k1(j,i) = k;
                end
            end
          end
      end
    end
end
 
disp(way);
disp(Error);
disp(k1);

j = 1;
for i = N/2:-1:1
%   disp(j);
%   disp(i);
%   disp(k1(j,i));
%   disp(x);
  x = strcat(num2str(Out1(j,i,k1(j,i))),num2str(Out2(j,i,k1(j,i))),x)
  c = dec2bin(j-1,2);
  c1 = str2num(c(1));
  c2 = str2num(c(2));
  a(i) = mod(Out1(j,i,k1(j,i))-c1-c2,2);
  j = way(j,i);
end

decoded_signal = a'                
end
